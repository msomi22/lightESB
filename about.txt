The purpose of this project is to design and develop a light weight ESB application. The ESB will support SOAP,XML,JSON over HTTP(s), TCP or Socket, JDBC and SFTP. 

The application will be fully configurable when a new service is required.

Say for instance, 

We need to expose a REST/XML service, this service will receive a custom payload, with objects and lists, all configurable.

Our ESB will be structured into two logical parts, business and technical.

The business logical part will do validation, authentication and authorization. The three will be configured in the database.

For example, 

Our above service will have basic authentication

All the inputs are mandatory, some will have legth check, reasonability check and range check.

Once the business logic is satisfied, the message will be droped in ActiveMQ "RequestQueue"

The second layer, which we will name as technical will do the actual business logic.

This can be, 

0. Configure a service, say sync or async, for async you should provide a callback endpoint and configure a callback response template.
1. Transformation as configured.
2. Enrichment etc.
3. Interacting with provider or just doing some transformation , say, transform the request into somegthing else like; given a json, give me a SOAP as per the specs configured in db.
4. Calling another endpoint, the provider.
5. Querying a database - at service level this and above 3 will be configured. For instance we will specify db type, say Postgres, connection string, poll size etc.
6. Send request to the provider, get response, trasform to the desired output.
7. Technical to drop the response in "ResponseQueue"
8. Business to pick and send back to the caller.

This ESB will be driven by congigurable templates, infact, every part will be configurable.


When there is a need for integration, no form of development will be required.

That said, the design of the application must be smart so that in future, there will be no need to change the code, mostly due to some unforeseen requirements.

The ESB will depend much on redis mem db for configurations.

That said and done, our slogan is.

Design, Design, Code.

Sample Requirement.

1. I want to configure an async REST/XML service, that will receive the below XML, "with dynamic ojects and lists".
2. Since the service is async, we will send an acknowledgment after basic validation and continue with our backed business logic.
3. Transform the request into a delimited string as per the configured template.
4. Respond back via the callback with a JSON object contating the delimited string. A final JSON response template will be configured.

1. *Caller request*

<request>
    <header>
        <systemCode>100</systemCode>
        <timestamp>time_here</timestamp>
        <service>001</service>
    </header>
    <body>
        <reference>unique_id</reference>
        <customerName>Peter Mwenda</customerName>
        <customerMobile>0718953974</customerMobile>
        <accounts>
            <account>
                <id>1</id>
                <name>peter</name>
                <mobile>0718953974</mobile>
                <email>mwendapeter72@gmail.com</email>
                <balance>100</balance>
            </account>
             <account>
                <id>2</id>
                <name>peter</name>
                <mobile>0718953974</mobile>
                <email>mwendapeter72@gmail.com</email>
                <balance>100</balance>
            </account>
             <account>
                <id>3</id>
                <name>peter</name>
                <mobile>0718953974</mobile>
                <email>mwendapeter72@gmail.com</email>
                <balance>100</balance>
            </account>
        </accounts>
    </body>
</request>

2. *Acknowledgement template*

<response>
    <header>
        <systemCode>100</systemCode>
        <timestamp>time_here</timestamp>
        <service>001</service>
    </header>
    <body>
        <reference>unique_id</reference>
        <satus>01</satus>
        <statusDesc>sucess</statusDesc>
    </body>
</response>

3. *Delimited template*

template ==> REQUEST:REF={reference},NAME={customerName},MOBILE={customerMobile},ACCOUNTS=*{accountT}
accountT ==> accounts:account=account[ACCOUNT_NO={id},ACCOUNT_TITLE={name},ACCOUNT_MOBILE={mobile},ACCOUNT_EMAIL={email},ACCOUNT_BALANCE={balance}]

4. *Final response template*
  
  
  
{
	"statusCode": "01",
	"statusDesc": "success",
	"response": [{
			"ResponseString": "REQUEST:REF=unique_id,NAME=Peter Mwenda,MOBILE=0718953974,ACCOUNTS=account=ACCOUNT_NO=1,ACCOUNT_TITLE=peter,ACCOUNT_MOBILE=0718953974,ACCOUNT_EMAIL=mwendapeter72@gmail.com,ACCOUNT_BALANCE=100^account=ACCOUNT_NO=2,ACCOUNT_TITLE=peter,ACCOUNT_MOBILE=0718953974,ACCOUNT_EMAIL=mwendapeter72@gmail.com,ACCOUNT_BALANCE=100^account=ACCOUNT_NO=3,ACCOUNT_TITLE=peter,ACCOUNT_MOBILE=0718953974,ACCOUNT_EMAIL=mwendapeter72@gmail.com,ACCOUNT_BALANCE=100",
			"status": "sucess"
		}

	]
}
  
  
  
  
  

XML lint tool

https://www.webtoolkitonline.com/xml-formatter.html

JSON lint tool

https://jsonlint.com



